gbdk3-2.93 - http://gbdk.sourceforge.net/
-----------------------------------------
This is a early-release beta.  Please report any bugs :)

Special note:
-------------
I've reverted the WORD to 16 bit unsigned change that required
-DGBDK_2_COMPAT=1.  You can use BYTE_IS_UNSIGNED if you, like me,
really want WORD to be unsigned :)

Short story:
------------
win32:
* Unzip using WinZip or similar (which youve probably already done :)
    e.g use WinZip to extract to d:\gbstuff\gbdk
* Add the 'bin' directory to your path if required.
    e.g Add 'PATH=%PATH%;d:\gbstuff\gbdk\bin' to autoexec.bat
* Restart if needed
* GBDK is ready to go - there is no need to compile the libraries or
  to set envoronment varibles.  You may want to remove the
  GBDKDIR line from autoexec.bat that an older version of gbdk may
  have put there.
  See the ChangeLog for more information.
* You can compile the examples by running 'make.bat' in examples\gb
    e.g d:, cd \gbstuff\gbdk\examples\gb, make

Linux:
* Very similar to win32
* Extract the archive somewhere (normally /usr/lib/gbdk)
* Set GBDKDIR to where you installed with a trailing /
* Try compiling the examples as above

Reporting problems and feature requests
---------------------------------------
1.  Make sure that you have read this README fully.
2.  Have a read of the gbdk homepage
    http://gbdk.sourceforge.net/
3.  Read the latest copy of this README
    http://cvs.sourceforge.net/cgi-bin/cvsweb.cgi/~checkout~/gbdk-support/README?cvsroot=gbdk
4.  Make sure you have the latest version
    https://sourceforge.net/project/?group_id=1249
5.  Check if anyone else has reported the problem
    https://sourceforge.net/bugs/?group_id=1249
6.  Submit a new bug using the link above.  It is _very_ helpful if you can 
    show how to reproduce the bug and/or give me the source to try and/or
    use the --dumpall (lcc -Wf--dumpall) option and send me all of the *.dump
    files.  Use the email address below.

To download the latest source, get the tarball on sourceforge,
extract, and type:

make -f update.mak update

The Linux binary is normally installed in /usr/lib/gbdk.  If you
install somewhere else, set GBDKDIR to the appropriate path.

eg.
	export GBDKDIR=/usr/local/stuff/gbdk/
   to autoexec.bat so that lcc can find everything.  Note the
trailing slash.

Changelog
---------
gbdk3-2.94
* Fixed 
	#define BLAH  7  // Unterminated ' error
  in sdcpp
* Fixed
	SCY_REG += 2, SCY_REG -= 5
  (add and subtract in indirect space) as they were both quite broken.
* externs and static's now work as expected.
* You can now specify which bank code should be put into using a
  #pragma e.g:
	#pragma bank=HOME
  Under rgbds and asxxxx putting code in the HOME bank will force
  the code into bank 0 - useful for library functions.  The most recent
  #pragma bank= will be the one used for the whole file.
* Fixed an interesting bug in the caching of lit addresses
* Added support for accessing high registers directly using the 'sfr'
  directive.  See libc/gb/sfr.s and gb/hardware.h for an example.  It
  should be possible with a bit of work to make high ram directly usable
  by the compiler; at the moment it is experimental.
  You can test sfr's by enabling USE_SFR_FOR_REG=1
* Added remove_VBL etc funtions.
* Documented the libs - see the gbdk-doc tarball distributed seperatly.
* Two dimensional arrays seem to be broken.

gbdk3-2.93
* Added multi-bank support into the compiler
   - The old -Wf-boxx and -Wf-baxx options now work
* Has preliminary support for generating rgbds and ISAS compatible
  assembler.  Try -W--asm=rgbds or -W--asm=isas.  The ISAS code is
  untested as I dont have access to the real assembler.
* RSH is fixed
* AND is fixed
* The missing parts of 2.1.0's libs are there.  Note: They are untested.
* The dscan demo now fully works (with a hack :)
* There is a bug with cached computed values which are later used as pointers.
  When the value is first used as a BYTE arg, then later as a pointer
  the pointer fails as the high byte was never computed and is now missing.
  A temporary fix is to declare something appropriate as 'volatile' to
  stop the value being cached.  See dscan.c/bombs() for an example.
  
gbdk3-2.92-2:
* win32 only.  Takes care of some of the install bugs, including:
   - Now autodetects where it is installed.
	This can be overridden using set GBDKDIR=...
   - Problems with the installer (now uses WinZip)
   - Problems with the temp directory
	Now scans TMP, TEMP, TMPDIR and finally c:\tmp
   - cygwin1.dll and 'make' are no longer required
   	gbdk is now built using mingw32 which is win32 native
	make.bat is automagically generated from the Makefile
   - I've reverted to using WORD for signed 16 bit etc.
	GBDK_2_COMPAT is no longer required.

gbdk3-2.92:
* All the examples now work (with a little bit of patching :)
* Fixed problem with registers being cached instead of being marked
  volatile.
* More register packing - should be a bit faster.
* You can now install somewhere except c:\gbdk | /usr/lib/gbdk
* Arrays initalised with constant addresses a'la galaxy.c now
  work.
* Fixed minor bug with 104$: labels in as.
* Up to 167d/s...

Differences between this and gbdk-2.1.5
---------------------------------------
* It now uses sdcc <http://sdcc.sourceforge.net/> as the C compiler
  which should lead to better code but unfortunatly will generate
  a whole new set of bugs :)  Most of the differences below are due
  to this change-over.
* sdcc _does not_ automatically promote varibles to int's.  This is 
  a 'good thing' as normally the promotion is unwanted on an eight
  bit system, but in some places you may get the wrong result.  If
  so, try promoting the varible manually i.e. (int)foo*20;
* If funny things happen when you access registers, try delcaring them
  as volatile.  See <hardware.h> for an example.  sdcc normally caches
  varibles for speed, but this causes trouble when accessing registers.
* The basic types have changed.  The sizes are now:
	char		8 bits
	int		16 bits
	long		32 bits
	long long	Doesnt exist
* Float support is there but unconnected.
* gbdk has an alternitave set of typedefs for those who like me like
  their WORDs to be unsigned.  Define BYTE_IS_UNSIGNED=1 to use the new
  typedefs.
	Before		With		Or		Size
	BYTE		INT8				8 signed
	UBYTE		BYTE		UINT8		8 unsigned
	WORD		INT16				16 signed
	UWORD		WORD		UINT16		16 unsigned
	DWORD		INT32				32 signed
	UDWORD		DWORD		UINT32		32 unsigned
* There is now real initalised static data support.  You can now use
  BYTE abModifyMeLater[] = { 5, 6, 7, 8 };

  void foo(void) 
  {
    abModifyMeLater[2] = 12;
  }
  and it will work.  Currently this is very inefficent but it will
  be improved.  See const in the next section
* Constant global structs (ie tile data, sprites) SHOULD be declared
  as 'const'  If they are not declared const, not only do they get copied
  into ram at startup but they take up about 6x the rom space.

-- Michael Hope
   <michaelh@earthling.net>
